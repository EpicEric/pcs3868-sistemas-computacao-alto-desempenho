/* #define IMPRIME 1 */
/*multiplicacao de matrizes: outer-product*/
#include <stdio.h>
#include <math.h>
#include <sys/time.h>
#include "mede_time.h"

shared int SIZE;

shared double a[2000][2000];
shared double b[2000][2000];
shared double c[2000][2000]; 

/*inicia matriz*/
task spec init_matrix();
task body init_matrix()
  { 
     int i,j,k;
      forall i=0 to (SIZE-1) {  
       for (j=0;j<SIZE;j++){
         a[i][j]=1.0;
         b[i][j]=1.0;
         c[i][j]=(double)0.0;
       }
      }
  }


/*multiplicacao*/
task spec mat_mul();
task body mat_mul()
  {
      int i,j,k,cont;

      forall i=0 to (SIZE-1) {
        for (k=0;k<SIZE;k++) 
          for (j=0;j<SIZE;j++)
            c[i][j]=c[i][j]+a[i][k]*b[k][j];
      }
  }


/*imprime matriz */
print_mat (a)
double a[2000][2000];
   {
      int i,j;

      for (i=0;i<SIZE;i++){
       for (j=0;j<SIZE;j++)
         printf (" %10.2f", a[i][j]);
       puts ("");
      }
      puts ("");
   }

/*imprime resultado*/
print_mats (a, b, c)
double a[2000][2000],b[2000][2000],c[2000][2000];
   {
      puts ("Matriz A");
      print_mat (a);

      puts ("Matriz B");
      print_mat (b);

      puts ("Matriz C");
      print_mat (c);
   }
 
main(argc, argv)
int argc;
char **argv;
{
  int nprocs;

  if (argc>1) { 
    SIZE = atoi(argv[1]);
    printf("Matriz %dx%d\n",SIZE,SIZE);
  }
  else {
    printf("Tamanho da matriz: ");
    scanf("%d",&SIZE);
  }
  if (argc>2) {
    nprocs = atoi(argv[2]);
    printf("Usando %d processadores\n",nprocs);
  }
  else {
    printf ("Numero de processadores: ");
    scanf("%d",&nprocs);
  }
 
  create nprocs, init_matrix();
  wait_all();
  TIMER_CLEAR;
  TIMER_START; 
  create nprocs, mat_mul();
  wait_all();
  TIMER_STOP;
  printf ("TEMPO [%d]: %12.7f\n",SIZE,TIMER_ELAPSED );

#ifdef IMPRIME 
  print_mats(a,b,c);
#endif 
}

